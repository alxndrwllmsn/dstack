"""This script is a collection of imaging function calls of svalidation and
sdiagnostics functions for my Thesis. The imaging scripts can be enabled by
switches in the beginning of the main section of the code. Only the SoFiA output
imaging scripts are called here, and so the 3Dbarollo output (kynematic modelling
results) are not generated by this scripts. The following images can be generated:
    
    - [] RMS -- channel plot for all methods from the dirty maps
    - [] RMS -- channel plot for all methods from the residual maps
    - [] nice mom0 and mom1 maps with column density contours (only grid stacking)
    - [] nice spectra plot (only grid stacking)
    - [x] spectras triangle plot
    - [x] mom0 triangle plot with 3and 5sigma contours and 1 sigma cut
    - [x] mom1 triangle plot with the mom0 contours and cut
    - [] measured -- column density flux density plots for all comparisons
    - [] N_px -- log(N_HI) histogram for all deep imaging method

The implemented plots are marked with [x].
Furthermore, the conventional imaging has not been completed, so for now I use
results from an old (PB corrected) run.
"""
#=== Imports ===
import os, sys
import os, sys
import shutil
import numpy as np
import logging
import warnings

import matplotlib
import matplotlib.pyplot as plt

import cmocean

#Import dstack and svalidation
import dstack as ds
import svalidation #import from current directory

#=== Setup logging ===
log = logging.getLogger(__name__)

#=== Globals ===
#RCparams for plotting
matplotlib.rcParams['xtick.direction'] = 'in'
matplotlib.rcParams['ytick.direction'] = 'in'

matplotlib.rcParams['xtick.major.size'] = 9
matplotlib.rcParams['ytick.major.size'] = 9

matplotlib.rcParams['xtick.major.width'] = 3
matplotlib.rcParams['ytick.major.width'] = 3

matplotlib.rcParams['axes.linewidth'] = 2

plt.rcParams['xtick.labelsize']=16
plt.rcParams['ytick.labelsize']=16

#4 sampled colors from viridis
c0 = '#440154';#Purple
c1 = '#30678D';#Blue
c2 = '#35B778';#Greenish
c3 = '#FDE724';#Yellow

outlier_color = 'dimgrey'

#Select the colormap and set outliers
_CMAP = matplotlib.cm.viridis
_CMAP.set_bad(color=outlier_color)

#Set the secondary colormap
#_DIV_CMAP = cmocean.cm.oxy
_CMAP2 = matplotlib.cm.plasma
_CMAP2.set_bad(color=outlier_color)

#Set diverging colormap default
#_DIV_CMAP = cmocean.cm.balance
_DIV_CMAP = cmocean.cm.delta
_DIV_CMAP.set_bad(color=outlier_color)

#=== Disable fits warnings ===
#In fact this ignores all Warnings, so comment this line for debugging!
warnings.filterwarnings('ignore', category=Warning, append=True)

#============
#=== MAIN ===
#============
if __name__ == "__main__":
    #pass
    log.setLevel(logging.INFO)
    log.addHandler(logging.StreamHandler(sys.stdout))

    #=== Define what to plot ===

    #Decide the resolution
    full_res = False #If True the 6km baseline results are plotted

    spectra_triangle_plot = False
    mom0_triangle_plot = True
    mom1_triangle_plot = False

    #=== Setup variables ===

    if not full_res:
        baseline_length = int(2)

        #Define environment variables
        working_dir = '/home/krozgonyi/Desktop/NGC7361_SoFiA_output/'

        output_dir = working_dir + 'validation/'

        sofia_dir_path_list = list(map(working_dir.__add__,['baseline_vis_imaging/',
            'co_added_visibilities/', 'stacked_grids/', 'stacked_images/',
            'old_conventional_imaging/']))    

        #Define source and imaging parameters

        #NOTE when only one element is given the imaging code automatically appends
        # it to the required size, i.e. all deep imaging has the same parameter

        source_ID_list = [6, 4, 4, 3, 1]
        name_base_list = ['beam17_all_']
        beam_correction_list = [False, True, True, True, False]
        b_maj_px_list = [5.]
        b_min_px_list = [5.]
        b_maj_list = [30.]
        b_min_list = [30.]
        b_pa_list = [0.]
        masking_list = [True]
        mask_sigma_list = [1.]
        color_list = ['black', c0, c2, c1, outlier_color]
        label_list = ['baseline visibilities', 'visibilities', 'stacked grids',
                        'stacked images', 'conventional imaging']
        ident_list = ['B', 'V', 'G', 'I', 'C']
        contour_levels = [5., 20.]

        #Single valued parameters
        N_opt_px = 130 #Number of optical background pixels in 1"
        mom_triangle_contours = True
        diff_saturation = 24.


    #=== Imaging ===
    if spectra_triangle_plot:
        log.info('Creating spectra triangle plot for {0:d}km \
baseline results...'.format(baseline_length))

        svalidation.plot_spectra_triangle_matrix(source_ID_list = source_ID_list,
            sofia_dir_list = sofia_dir_path_list,
            name_base_list = name_base_list,
            output_name = output_dir + 'spectra_triangle.pdf',
            beam_correction_list = beam_correction_list,
            b_maj_px_list = b_maj_px_list,
            b_min_px_list = b_min_px_list,
            color_list = color_list,
            label_list = label_list,
            ident_list = ident_list)
    
        log.info('...done')

    if mom0_triangle_plot:
        log.info('Creating mom0 triangle plot for {0:d}km \
baseline results...'.format(baseline_length))

        svalidation.plot_momN_triangle_matrix(moment = 0,
            source_ID_list = source_ID_list,
            sofia_dir_list = sofia_dir_path_list,
            name_base_list = name_base_list,
            output_name = output_dir + 'mom0_map_triangle.pdf',
            N_optical_pixels = N_opt_px,
            masking_list = masking_list,
            mask_sigma_list = mask_sigma_list,
            color_list = color_list,
            label_list = label_list,
            ident_list = ident_list,
            b_maj_list = b_maj_list,
            b_min_list = b_min_list,
            b_pa_list = b_pa_list,
            sensitivity=False,
            contours=mom_triangle_contours,
            contour_levels = contour_levels)

        log.info('...done')


    if mom1_triangle_plot:
        log.info('Creating mom1 triangle plot for {0:d}km \
baseline results...'.format(baseline_length))

        svalidation.plot_momN_triangle_matrix(moment = 1,
            source_ID_list = source_ID_list,
            sofia_dir_list = sofia_dir_path_list,
            name_base_list = name_base_list,
            output_name = output_dir + 'mom1_map_triangle.pdf',
            N_optical_pixels = N_opt_px,
            masking_list = masking_list,
            mask_sigma_list = mask_sigma_list,
            color_list = color_list,
            label_list = label_list,
            ident_list = ident_list,
            b_maj_list = b_maj_list,
            b_min_list = b_min_list,
            b_pa_list = b_pa_list,
            sensitivity=False,
            contours=mom_triangle_contours,
            contour_levels = contour_levels,
            diff_saturation = diff_saturation)

        log.info('...done')