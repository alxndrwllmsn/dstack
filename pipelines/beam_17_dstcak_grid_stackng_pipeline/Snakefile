"""This is an example Snakemake makefile to
run some grid stacking without slurm support so far
"""

#=== Define variables for the pipeline ===
#Absolute path to working directory
WORKING_DIR = os.getcwd() #YandaSoft needs absolute paths

CHANNELS = 11

#This maps the irregularry names input MS to a regular naming scheme
MS_MAPPING = {'1':'scienceData_SB10991_G23_T0_B_06.beam17_SL_C_100_110',
            '2':'scienceData_SB11000_G23_T0_B_03.beam17_SL_C_100_110'}

#=== Define rules ===
#ruleorder: create_deep_parset > deep_imaging #only needed for rules writing the same files e.g. not in this pipeline

#Master rule:
rule all:
    input:
        'test/stacked_grids/image.deep.restored'

#Other pipeline rules:
rule create_parset:
    input:
        MS =  lambda wildcards: 'measurement_sets/{0:s}.ms'.format(MS_MAPPING[wildcards.night_index]),
        template_parset = 'template_parset.in'
    output:
        'test/night_{night_index}/dumpgrid_parset.in'
    params:
        op = 'test/night_{night_index}', #Setup a variable using a wildcard
        working_dir = WORKING_DIR
    shell:
        'dparset -i Cimager -n image.dumpgrid -g WProject -op {params.op} \
-pn dumpgrid_parset.in -t {input.template_parset} -tn image.sim_PC -a dataset={params.working_dir}/{input.MS}'

rule first_pass_imaging:
    input:
       'test/night_{night_index}/dumpgrid_parset.in'
    output:
        #directory('test/night_{night_index}/night_{night_index}.grid')
        directory('test/night_{night_index}/grid.wr.1.dumpgrid'),
        directory('test/night_{night_index}/psfgrid.wr.1.dumpgrid'),
        directory('test/night_{night_index}/pcf.wr.1.dumpgrid')
    log:
        #'test/night_{night_index}/logfile_dumpgrid_night_{night_index}.log' #We can set variables inside log e.g: log: log1: 'a.log', log2: 'b.log' then in shell call {log.log1}
        'logfile_dumpgrid_night_{night_index}.log' #We can set variables inside log e.g: log: log1: 'a.log', log2: 'b.log' then in shell call {log.log1}
    params:
        night_subdir = 'test/night_{night_index}/' #Need to run imaging inside the directory
    shell:
        #'echo cd {params.night_subdir}  && ' + 'mpirun -np {0:d}'.format(CHANNELS+1) + ' imager -c dumpgrid_parset.in > logfile_dumpgrid_night_{night_index}.log; mkdir {output}' #This is how to mix wildcards and variables in the shell execution string
        'cd {params.night_subdir}  && ' + 'mpirun -np {0:d}'.format(CHANNELS+1) + ' imager -c dumpgrid_parset.in > ./{log}' #This is how to mix wildcards and variables in the shell execution string

rule grid_stacking:
    input:
        grid = ['test/night_{0:s}/grid.wr.1.dumpgrid'.format(night_index) for night_index in MS_MAPPING.keys()],
        psfgrid = ['test/night_{0:s}/psfgrid.wr.1.dumpgrid'.format(night_index) for night_index in MS_MAPPING.keys()],
        pcf = ['test/night_{0:s}/pcf.wr.1.dumpgrid'.format(night_index) for night_index in MS_MAPPING.keys()] #We define the relgular naming scheme used in our mapping for the input MS!
    output:
        grid = directory('test/stacked_grids/grid.deep'),
        psfgrid = directory('test/stacked_grids/psfgrid.deep'),
        pcf = directory('test/stacked_grids/pcf.deep')
    params:
        working_dir = WORKING_DIR,
        cp = 'test/stacked_grids',
        cn_grid = 'grid.deep',
        cn_psfgrid = 'psfgrid.deep',
        cn_pcf = 'pcf.deep'
    shell:
        'dstacking -cl {params.working_dir}/{input.grid} -cp {params.cp} -cn {params.cn_grid} -c;\
        dstacking -cl {params.working_dir}/{input.psfgrid} -cp {params.cp} -cn {params.cn_psfgrid} -c; \
        dstacking -cl {params.working_dir}/{input.pcf} -cp {params.cp} -cn {params.cn_pcf} -c'

rule create_deep_parset:
    input:
        grid = 'test/stacked_grids/grid.deep',
        psfgrid = 'test/stacked_grids/psfgrid.deep',
        pcf = 'test/stacked_grids/pcf.deep',
        template_parset = 'template_parset.in',
        working_dir = WORKING_DIR
    output:
        'test/stacked_grids/cdeconvolver_{image_names}.in' #Need to have a wildcard in the output so I can pass it to a variable
    params:
        image_names = '{image_names}' #If I don't want to hardcode it in case I want to scale upt to beams
    shell:
        'dparset -i Cdeconvolver -n {params.image_names} -g WProject -op test/stacked_grids \
-pn cdeconvolver_{params.image_names}.in -t {input.template_parset} -tn image.sim_PC -a grid={input.working_dir}/{input.grid} \
psfgrid={input.working_dir}/{input.psfgrid} pcf={input.working_dir}/{input.pcf}'

rule deep_imaging:
    input:
        grid = 'test/stacked_grids/grid.deep',
        parset = 'test/stacked_grids/cdeconvolver_{image_names}.in'
    output:
        directory('test/stacked_grids/{image_names}.restored')
    log:
        #'test/stacked_grids/logfile_cdeconvolver_{image_names}.log' #Logfile have to contain the same wildcards as all output
        'logfile_cdeconvolver_{image_names}.log'
    shell:
        #'echo mpirun -np {0:d}'.format(CHANNELS) + ' cdeconvolver-mpi -c {input.parset} > {log}; mkdir {output}'
        'cd test/stacked_grids/ && mpirun -np {0:d}'.format(CHANNELS) + ' cdeconvolver-mpi -c {input.parset} > ./{log}'
