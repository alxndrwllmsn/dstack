"""This is an example Snakemake makefile to
run some grid stacking without slurm support so far
"""

import os

#=== Define variables for the pipeline ===
#Absolute path to working directory
MS_DIR = '/home/krozgonyi/dstack/pipelines/beam_17_robustness_test_pipeline/measurement_sets'
WORKING_DIR = os.getcwd() #YandaSoft needs absolute paths; however /scratch ave a sybbolic link attache in Pleiades...

#MS_DIR = '/mnt/hidata2/dingo/pilot/uvgrid'
#WORKING_DIR = '/scratch/krozgonyi/dstack_robustness_test' #Hardcoding solves the symlink problem...

MIN_CHANNEL = 6420
MAX_CHANNEL = 6422

#MIN_CHANNEL = 6377
#MAX_CHANNEL = 6476

N_CHANNELS = MAX_CHANNEL - MIN_CHANNEL + 1 #Both the min and the max are included thats why we have the +1

#=== Define resources
N_CORES_MAX = 10#+1 for the imaging

if N_CHANNELS > N_CORES_MAX:
    N_CHANNELS = N_CORES_MAX

#This maps the irregularry names input MS to a regular naming scheme
ORIGINAL_MS_MAPPING = {'1':'SB10991/scienceData_SB10991_G23_T0_B_06.beam17_SL',
                        '2':'SB11000/scienceData_SB11000_G23_T0_B_03.beam17_SL'}

#Slurm logfiles firetory
LOGDIR = '{0:s}/rule_logs'.format(WORKING_DIR) #Have to be the same as the output defined in the config.yaml file!!!

#Envinroment setup
ENV_SETUP = 'source /home/krozgonyi/.bashrc dstack_env_setup ; '

#=== Define rules ===
#ruleorder: create_log_dir > create_mssplit_configfile

#Master rule:
rule all:
    input:
        '{0:s}'.format(LOGDIR), #Make sure that the log dir exist before running => can not create this with a rule as snakemake wants to log the rule to the same folder through slurm!
        #No prec
        'test/stacked_grids/no_prec/image.deep.restored',#Grid stack
        'test/co_added_visibilites/no_prec/image.deep.restored',#Co-added visibility imaging
        'test/stacked_images/no_prec/image.restored.deep', 'test/stacked_images/no_prec/psf.deep', 'test/stacked_images/no_prec/psf.image.deep',#Image stack
        'test/stacked_images/no_prec/residual.deep', 'test/stacked_images/no_prec/model.deep',#Image stack
        #Natural
        'test/stacked_grids/natural_weighting/image.deep.restored', 
        'test/co_added_visibilites/natural_weighting/image.deep.restored',
        'test/stacked_images/natural_weighting/image.restored.deep', 'test/stacked_images/natural_weighting/psf.image.deep', 
        'test/stacked_images/natural_weighting/psf.deep', 'test/stacked_images/natural_weighting/residual.deep', 'test/stacked_images/natural_weighting/model.deep',
        #Uniform
        'test/stacked_grids/uniform_weighting/image.deep.restored', 
        'test/co_added_visibilites/uniform_weighting/image.deep.restored',
        'test/stacked_images/uniform_weighting/image.restored.deep', 'test/stacked_images/uniform_weighting/psf.image.deep', 
        'test/stacked_images/uniform_weighting/psf.deep', 'test/stacked_images/uniform_weighting/residual.deep', 'test/stacked_images/uniform_weighting/model.deep',

rule create_mssplit_configfile:
    input:
        logdir = '{0:s}'.format(LOGDIR),
        MS =  lambda wildcards: '{0:s}/{1:s}.ms'.format(MS_DIR,ORIGINAL_MS_MAPPING[wildcards.night_index])
    output:
        'mssplit_config/mssplit_config_night_{night_index}.in'
    params:
        output_MS = 'measurement_sets/night_{night_index}.ms'
    shell:
        #Here I have to use absolute path for the mssplit task
        'echo vis={input.MS} >> ' + '{output} ; ' + \
        'echo outputvis={0:s}'.format(WORKING_DIR) + '/{params.output_MS} >> ' + '{output} ; ' + \
        'echo channel={0:d}-{1:d} >> '.format(MIN_CHANNEL,MAX_CHANNEL) + '{output}'

rule split_ms:
    input:
        MS =  lambda wildcards: '{0:s}/{1:s}.ms'.format(MS_DIR,ORIGINAL_MS_MAPPING[wildcards.night_index]),
        mssplit_config = 'mssplit_config/mssplit_config_night_{night_index}.in'
    output:
        directory('measurement_sets/night_{night_index}.ms')
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=3,
    shell:
        ENV_SETUP + \
        'mssplit -c {input.mssplit_config}'

#"""
rule concentrate_ms:
    input:
        ['measurement_sets/night_{0:s}.ms'.format(night_index) for night_index in ORIGINAL_MS_MAPPING.keys()]
    output:
        directory('measurement_sets/co_added_visibilites/all_nights.ms')
    params:
        input_ms = ' '.join(['{0:s}/measurement_sets/night_{1:s}.ms'.format(WORKING_DIR,night_index) for night_index in ORIGINAL_MS_MAPPING.keys()]) #String containing all input MS with abspath
    resources:
        walltime=150,
        mem_mb=4000,
        cpus_per_task=1 #It is not a parallel task => see documentation at: https://www.atnf.csiro.au/computing/software/askapsoft/sdp/docs/current/calim/msconcat.html
    shell:
        'msconcat -o {0:s}/'.format(WORKING_DIR) + '{output} {params.input_ms}'
#"""

rule create_co_added_visibility_parset:
    input:
        MS = 'measurement_sets/co_added_visibilites/all_nights.ms',
        template_parset = 'template_parset.in'
    output:
        'test/co_added_visibilites/{weighting}_weighting/dumpgrid_deep.in'
    params:
        op = 'test/co_added_visibilites/{weighting}_weighting/',
        pn = 'dumpgrid_deep.in',
        robustness = lambda wildcards: '2.0' if '{0:s}'.format(wildcards.weighting) == 'natural' else '-2.0' if '{0:s}'.format(wildcards.weighting) == 'uniform' else '2.0'
    shell:
        ENV_SETUP + \
        'dparset -i Cimager -n image.deep -g WProject -op {params.op} ' +\
        '-pn {params.pn} -t {input.template_parset} -tn image.sim_PC -a dataset=' + '{0:s}/'.format(WORKING_DIR) + '{input.MS} ' + \
        'INnchan={0:d} '.format(N_CHANNELS) + 'PWrobustness={params.robustness} ' + \
        '-p Wiener'

rule create_no_prec_co_added_visibility_parset:
    input:
        MS = 'measurement_sets/co_added_visibilites/all_nights.ms',
        template_parset = 'template_parset.in'
    output:
        'test/co_added_visibilites/no_prec/dumpgrid_deep.in'
    params:
        op = 'test/co_added_visibilites/no_prec/',
        pn = 'dumpgrid_deep.in',
    shell:
        ENV_SETUP + \
        'dparset -i Cimager -n image.deep -g WProject -op {params.op} ' +\
        '-pn {params.pn} -t {input.template_parset} -tn image.sim_PC -a dataset=' + '{0:s}/'.format(WORKING_DIR) + '{input.MS} ' + \
        'INnchan={0:d} '.format(N_CHANNELS) + 'PWrobustness=2.0 ' + \
        '-p '#Set the preconditioner to an empty list i.e. no preconditioning

rule deep_co_added_visibility_imaging:
    #Create an empty output file as the output have to contain the right wildcard for consistency. Thus the all rule has to call this output file!
    input:
        MS = 'measurement_sets/co_added_visibilites/all_nights.ms',
        parset = 'test/co_added_visibilites/{weighting}_weighting/dumpgrid_deep.in'
    output:
        directory('test/co_added_visibilites/{weighting}_weighting/grid.wr.1.deep'),
        directory('test/co_added_visibilites/{weighting}_weighting/psfgrid.wr.1.deep'),
        directory('test/co_added_visibilites/{weighting}_weighting/pcf.wr.1.deep')
    params:
        yanda_logfile = 'logfile_dumpgrid_deep.log',
        parset_name = 'dumpgrid_deep.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS+1
    shell:
        ENV_SETUP + \
        'cd test/co_added_visibilites/{wildcards.weighting}_weighting/ ' + '&& mpirun -np {0:d}'.format(N_CHANNELS+1) + ' imager -c {params.parset_name} > ./{params.yanda_logfile}'

rule deep_no_prec_co_added_visibility_imaging:
    #Create an empty output file as the output have to contain the right wildcard for consistency. Thus the all rule has to call this output file!
    input:
        MS = 'measurement_sets/co_added_visibilites/all_nights.ms',
        parset = 'test/co_added_visibilites/no_prec/dumpgrid_deep.in'
    output:
        directory('test/co_added_visibilites/no_prec/grid.wr.1.deep'),
        directory('test/co_added_visibilites/no_prec/psfgrid.wr.1.deep'),
        directory('test/co_added_visibilites/no_prec/pcf.wr.1.deep')
    params:
        yanda_logfile = 'logfile_dumpgrid_deep.log',
        parset_name = 'dumpgrid_deep.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS+1
    shell:
        ENV_SETUP + \
        'cd test/co_added_visibilites/no_prec/ && mpirun -np {0:d}'.format(N_CHANNELS+1) + ' imager -c {params.parset_name} > ./{params.yanda_logfile}'

rule create_cdeconvolver_co_added_visibility_parset:
    input:
        grid = 'test/co_added_visibilites/{weighting}_weighting/grid.wr.1.deep',
        psfgrid = 'test/co_added_visibilites/{weighting}_weighting/psfgrid.wr.1.deep',
        pcf = 'test/co_added_visibilites/{weighting}_weighting/pcf.wr.1.deep',
        template_parset = 'template_parset.in'
    output:
        'test/co_added_visibilites/{weighting}_weighting/cdeconvolver_{image_names}.in' #Need to have a wildcard in the output so I can pass it to a variable
    params:
        image_names = '{image_names}', #If I don't want to hardcode it in case I want to scale upt to beams
        robustness = lambda wildcards: '2.0' if '{0:s}'.format(wildcards.weighting) == 'natural' else '-2.0' if '{0:s}'.format(wildcards.weighting) == 'uniform' else '2.0' #Tricky if/elif statement to get robustness
    shell:
        ENV_SETUP + \
        'dparset -i Cdeconvolver -n {params.image_names} -g WProject -op test/co_added_visibilites/no_prec ' +\
        '-pn cdeconvolver_{params.image_names}.in -t {input.template_parset} -tn image.sim_PC -a ' + \
        'grid={0:s}/'.format(WORKING_DIR) + '{input.grid} ' + \
        'psfgrid={0:s}/'.format(WORKING_DIR) + '{input.psfgrid} ' + \
        'pcf={0:s}/'.format(WORKING_DIR) + '{input.pcf} ' +\
        'INnchan={0:d} '.format(N_CHANNELS) +\
        'PWrobustness={params.robustness} -p Wiener '

rule create_cdeconvolver_no_prec_co_added_visibility_parset:
    input:
        grid = 'test/co_added_visibilites/no_prec/grid.wr.1.deep',
        psfgrid = 'test/co_added_visibilites/no_prec/psfgrid.wr.1.deep',
        pcf = 'test/co_added_visibilites/no_prec/pcf.wr.1.deep',
        template_parset = 'template_parset.in'
    output:
        'test/co_added_visibilites/no_prec/cdeconvolver_{image_names}.in' #Need to have a wildcard in the output so I can pass it to a variable
    params:
        image_names = '{image_names}', #If I don't want to hardcode it in case I want to scale upt to beams
    shell:
        ENV_SETUP + \
        'dparset -i Cdeconvolver -n {params.image_names} -g WProject -op test/co_added_visibilites/no_prec ' +\
        '-pn cdeconvolver_{params.image_names}.in -t {input.template_parset} -tn image.sim_PC -a ' + \
        'grid={0:s}/'.format(WORKING_DIR) + '{input.grid} ' + \
        'psfgrid={0:s}/'.format(WORKING_DIR) + '{input.psfgrid} ' + \
        'pcf={0:s}/'.format(WORKING_DIR) + '{input.pcf} ' +\
        'INnchan={0:d} '.format(N_CHANNELS) +\
        'PWrobustness=2.0 -p '

rule cdeconvolver_co_added_visibility_imaging:
    input:
        grid = 'test/co_added_visibilites/{weighting}_weighting/grid.wr.1.deep',
        parset = 'test/co_added_visibilites/{weighting}_weighting/cdeconvolver_{image_names}.in'
    output:
        directory('test/co_added_visibilites/{weighting}_weighting/{image_names}.restored')
    params:
        yanda_logfile = 'logfile_cdeconvolver_{image_names}.log',
        parset_name = 'cdeconvolver_{image_names}.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS
    shell:
        ENV_SETUP + \
        'cd test/co_added_visibilites/{weighting}_weighting/ ' + '&& mpirun -np {0:d}'.format(N_CHANNELS) + ' cdeconvolver-mpi -c {params.parset_name} > ./{params.yanda_logfile}'

rule no_prec_cdeconvolver_co_added_visibility_imaging:
    input:
        grid = 'test/co_added_visibilites/no_prec/grid.wr.1.deep',
        parset = 'test/co_added_visibilites/no_prec/cdeconvolver_{image_names}.in'
    output:
        directory('test/co_added_visibilites/no_prec/{image_names}.restored')
    params:
        yanda_logfile = 'logfile_cdeconvolver_{image_names}.log',
        parset_name = 'cdeconvolver_{image_names}.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS
    shell:
        ENV_SETUP + \
        'cd test/co_added_visibilites/no_prec/ && mpirun -np {0:d}'.format(N_CHANNELS) + ' cdeconvolver-mpi -c {params.parset_name} > ./{params.yanda_logfile}'

rule create_daily_parset:
    input:
        MS = 'measurement_sets/night_{night_index}.ms',
        template_parset = 'template_parset.in'
    output:
        'test/night_{night_index}/{weighting}_weighting/dumpgrid_parset.in'
    params:
        op = 'test/night_{night_index}/{weighting}_weighting/', #Setup a variable using a wildcard
        robustness = lambda wildcards: '2.0' if '{0:s}'.format(wildcards.weighting) == 'natural' else '-2.0' if '{0:s}'.format(wildcards.weighting) == 'uniform' else '2.0' #Tricky if/elif statement to get robustness
    shell:
        ENV_SETUP + \
        'dparset -i Cimager -n image.dumpgrid -g WProject -op {params.op} ' + \
        '-pn dumpgrid_parset.in -t {input.template_parset} -tn image.sim_PC -a dataset=' + '{0:s}/'.format(WORKING_DIR) + '{input.MS} ' + \
        'INnchan={0:d} '.format(N_CHANNELS) + 'PWrobustness={params.robustness} ' + \
        '-p Wiener'

rule create_no_prec_daily_parset:
    input:
        MS = 'measurement_sets/night_{night_index}.ms',
        template_parset = 'template_parset.in'
    output:
        'test/night_{night_index}/no_prec/dumpgrid_parset.in'
    params:
        op = 'test/night_{night_index}/no_prec/', #Setup a variable using a wildcard
    shell:
        ENV_SETUP + \
        'dparset -i Cimager -n image.dumpgrid -g WProject -op {params.op} ' + \
        '-pn dumpgrid_parset.in -t {input.template_parset} -tn image.sim_PC -a dataset=' + '{0:s}/'.format(WORKING_DIR) + '{input.MS} ' + \
        'INnchan={0:d} '.format(N_CHANNELS) + 'PWrobustness=2.0 ' + \
        '-p '#Enpty strung i.e. no preconditioning => imaging won't create the psf.image.deep output (normalised) psf image

rule first_pass_imaging:
    input:
       'test/night_{night_index}/{weighting}_weighting/dumpgrid_parset.in'
    output:
        directory('test/night_{night_index}/{weighting}_weighting/grid.wr.1.dumpgrid'),
        directory('test/night_{night_index}/{weighting}_weighting/psfgrid.wr.1.dumpgrid'),
        directory('test/night_{night_index}/{weighting}_weighting/pcf.wr.1.dumpgrid'),
        directory('test/night_{night_index}/{weighting}_weighting/psf.wr.1.dumpgrid'),
    params:
        yanda_logfile = 'logfile_dumpgrid_night_{night_index}.log',
        night_subdir = 'test/night_{night_index}/{weighting}_weighting/' #Need to run imaging inside the directory
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS+1
    shell:
        ENV_SETUP + \
        'cd {params.night_subdir}  && ' + 'mpirun -np {0:d}'.format(N_CHANNELS+1) + ' imager -c dumpgrid_parset.in > ./{params.yanda_logfile}'#This is how to mix wildcards and variables in the shell execution string

rule no_prec_first_pass_imaging:
    input:
       'test/night_{night_index}/no_prec/dumpgrid_parset.in'
    output:
        directory('test/night_{night_index}/no_prec/grid.wr.1.dumpgrid'),
        directory('test/night_{night_index}/no_prec/psfgrid.wr.1.dumpgrid'),
        directory('test/night_{night_index}/no_prec/pcf.wr.1.dumpgrid'),
        directory('test/night_{night_index}/no_prec/psf.wr.1.dumpgrid'),
    params:
        yanda_logfile = 'logfile_dumpgrid_night_{night_index}.log',
        night_subdir = 'test/night_{night_index}/no_prec/' #Need to run imaging inside the directory
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS+1
    shell:
        ENV_SETUP + \
        'cd {params.night_subdir}  && ' + 'mpirun -np {0:d}'.format(N_CHANNELS+1) + ' imager -c dumpgrid_parset.in > ./{params.yanda_logfile}'#This is how to mix wildcards and variables in the shell execution string

rule create_daily_cdeconvolver_parset:
    input:
        grid = 'test/night_{night_index}/{weighting}_weighting/grid.wr.1.dumpgrid',
        psfgrid = 'test/night_{night_index}/{weighting}_weighting/psfgrid.wr.1.dumpgrid',
        pcf = 'test/night_{night_index}/{weighting}_weighting/pcf.wr.1.dumpgrid',
        template_parset = 'template_parset.in'
    output:
        'test/night_{night_index}/{weighting}_weighting/cdeconvolver_daily_parset.in'
    params:
        image_names = 'daily', #Bacause how the output will look like
        op = 'test/night_{night_index}/{weighting}_weighting/', #Setup a variable using a wildcard
        robustness = lambda wildcards: '2.0' if '{0:s}'.format(wildcards.weighting) == 'natural' else '-2.0' if '{0:s}'.format(wildcards.weighting) == 'uniform' else '2.0' #Tricky if/elif statement to get robustness
    shell:
        ENV_SETUP + \
        'dparset -i Cdeconvolver -n image.{params.image_names} -g WProject -op {params.op} ' +\
        '-pn cdeconvolver_daily_parset.in -t {input.template_parset} -tn image.sim_PC -a ' + \
        'grid={0:s}/'.format(WORKING_DIR) + '{input.grid} ' + \
        'psfgrid={0:s}/'.format(WORKING_DIR) + '{input.psfgrid} ' + \
        'pcf={0:s}/'.format(WORKING_DIR) + '{input.pcf} ' +\
        'INnchan={0:d} '.format(N_CHANNELS) +\
        'PWrobustness={params.robustness} -p Wiener'

rule create_no_prec_daily_cdeconvolver_parset:
    input:
        grid = 'test/night_{night_index}/no_prec/grid.wr.1.dumpgrid',
        psfgrid = 'test/night_{night_index}/no_prec/psfgrid.wr.1.dumpgrid',
        pcf = 'test/night_{night_index}/no_prec/pcf.wr.1.dumpgrid',
        template_parset = 'template_parset.in'
    output:
        'test/night_{night_index}/no_prec/cdeconvolver_daily_parset.in'
    params:
        image_names = 'daily', #Bacause how the output will look like
        op = 'test/night_{night_index}/no_prec/'
    shell:
        ENV_SETUP + \
        'dparset -i Cdeconvolver -n image.{params.image_names} -g WProject -op {params.op} ' +\
        '-pn cdeconvolver_daily_parset.in -t {input.template_parset} -tn image.sim_PC -a ' + \
        'grid={0:s}/'.format(WORKING_DIR) + '{input.grid} ' + \
        'psfgrid={0:s}/'.format(WORKING_DIR) + '{input.psfgrid} ' + \
        'pcf={0:s}/'.format(WORKING_DIR) + '{input.pcf} ' +\
        'INnchan={0:d} '.format(N_CHANNELS) +\
        'PWrobustness=2.0-p '#No preconditioning

rule cdeconvolver_first_pass_imaging:
    input:
        grid = 'test/night_{night_index}/{weighting}_weighting/grid.wr.1.dumpgrid',
        psfgrid = 'test/night_{night_index}/{weighting}_weighting/psfgrid.wr.1.dumpgrid',
        pcf = 'test/night_{night_index}/{weighting}_weighting/pcf.wr.1.dumpgrid',
        psf = 'test/night_{night_index}/{weighting}_weighting/psf.wr.1.dumpgrid',
        parset = 'test/night_{night_index}/{weighting}_weighting/cdeconvolver_daily_parset.in'
    output:
        directory('test/night_{night_index}/{weighting}_weighting/image.{image_names}.restored'),
        directory('test/night_{night_index}/{weighting}_weighting/model.{image_names}'),
        directory('test/night_{night_index}/{weighting}_weighting/psf.{image_names}'),
        directory('test/night_{night_index}/{weighting}_weighting/residual.{image_names}')
    params:
        yanda_logfile = 'logfile_cdeconvolver_daily.log',
        parset_name = 'test/night_{night_index}/{weighting}_weighting/cdeconvolver_daily_parset.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS
    shell:
        ENV_SETUP + \
        'cd test/night_{night_index}/{wildcards.weighting}_weighting/ ' + '&& mpirun -np {0:d}'.format(N_CHANNELS) + ' cdeconvolver-mpi -c {params.parset_name} > ./{params.yanda_logfile}'

rule cdeconvolver_no_prec_first_pass_imaging:
    input:
        grid = 'test/night_{night_index}/no_prec/grid.wr.1.dumpgrid',
        psfgrid = 'test/night_{night_index}/no_prec/psfgrid.wr.1.dumpgrid',
        pcf = 'test/night_{night_index}/no_prec/pcf.wr.1.dumpgrid',
        psf = 'test/night_{night_index}/no_prec/psf.wr.1.dumpgrid',
        parset = 'test/night_{night_index}/no_prec/cdeconvolver_daily_parset.in'
    output:
        directory('test/night_{night_index}/no_prec/image.{image_names}.restored'),
        directory('test/night_{night_index}/no_prec/model.{image_names}'),
        directory('test/night_{night_index}/no_prec/psf.{image_names}'),
        directory('test/night_{night_index}/no_prec/residual.{image_names}')
    params:
        yanda_logfile = 'logfile_cdeconvolver_daily.log',
        parset_name = 'test/night_{night_index}/no_prec/cdeconvolver_daily_parset.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS
    shell:
        ENV_SETUP + \
        'cd test/night_{night_index}/no_prec/ ' + '&& mpirun -np {0:d}'.format(N_CHANNELS) + ' cdeconvolver-mpi -c {params.parset_name} > ./{params.yanda_logfile}'

rule grid_stacking:
    #This rulke unfortunately can not include the non_preconditioning case, due how wildcards work...
    input:
        grid = ['test/night_{0:s}/'.format(night_index) + '{weighting}_weighting/grid.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()],
        psfgrid = ['test/night_{0:s}/'.format(night_index) + '{weighting}_weighting/psfgrid.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()],
        pcf = ['test/night_{0:s}/'.format(night_index) + '{weighting}_weighting/pcf.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()] #We define the relgular naming scheme used in our mapping for the input MS!
    output:
        grid = directory('test/stacked_grids/{weighting}_weighting/grid.deep'),
        psfgrid = directory('test/stacked_grids/{weighting}_weighting/psfgrid.deep'),
        pcf = directory('test/stacked_grids/{weighting}_weighting/pcf.deep')
    params:
        #Need to use abspath here I think
        cp = '{0:s}'.format(WORKING_DIR) + '/test/stacked_grids/{weighting}_weighting',
        cn_grid = 'grid.deep',
        cn_psfgrid = 'psfgrid.deep',
        cn_pcf = 'pcf.deep'
    resources:
        walltime=15,
        mem_mb=4000,
    shell:
        ENV_SETUP + \
        'dstacking -cl {input.grid} -cp {params.cp} -cn {params.cn_grid} -c ; \
        dstacking -cl {input.psfgrid} -cp {params.cp} -cn {params.cn_psfgrid} -c ; \
        dstacking -cl {input.pcf} -cp {params.cp} -cn {params.cn_pcf} -c ; '

rule no_prec_grid_stacking:
    #This rulke unfortunately can not include the non_preconditioning case, due how wildcards work...
    input:
        grid = ['test/night_{0:s}/'.format(night_index) + 'no_prec/grid.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()],
        psfgrid = ['test/night_{0:s}/'.format(night_index) + 'no_prec/psfgrid.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()],
        pcf = ['test/night_{0:s}/'.format(night_index) + 'no_prec/pcf.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()] #We define the relgular naming scheme used in our mapping for the input MS!
    output:
        grid = directory('test/stacked_grids/no_prec/grid.deep'),
        psfgrid = directory('test/stacked_grids/no_prec/psfgrid.deep'),
        pcf = directory('test/stacked_grids/no_prec/pcf.deep')
    params:
        #Need to use abspath here I think
        cp = '{0:s}'.format(WORKING_DIR) + '/test/stacked_grids/no_prec',
        cn_grid = 'grid.deep',
        cn_psfgrid = 'psfgrid.deep',
        cn_pcf = 'pcf.deep'
    resources:
        walltime=15,
        mem_mb=4000,
    shell:
        ENV_SETUP + \
        'dstacking -cl {input.grid} -cp {params.cp} -cn {params.cn_grid} -c ; \
        dstacking -cl {input.psfgrid} -cp {params.cp} -cn {params.cn_psfgrid} -c ; \
        dstacking -cl {input.pcf} -cp {params.cp} -cn {params.cn_pcf} -c ; '

rule image_stacking:
    #For similar reasons the no_prec case is not included
    input:
        restored_image = ['test/night_{0:s}'.format(night_index) + '/{weighting}_weighting/image.daily.restored' for night_index in ORIGINAL_MS_MAPPING.keys()],
        psf_for_weighting = ['test/night_{0:s}'.format(night_index) + '/{weighting}_weighting/psf.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()], #For weighting
        psf = ['test/night_{0:s}'.format(night_index) + '/{weighting}_weighting/psf.daily' for night_index in ORIGINAL_MS_MAPPING.keys()],
        residual = ['test/night_{0:s}'.format(night_index) + '/{weighting}_weighting/residual.daily' for night_index in ORIGINAL_MS_MAPPING.keys()],
        model = ['test/night_{0:s}'.format(night_index) + '/{weighting}_weighting/model.daily' for night_index in ORIGINAL_MS_MAPPING.keys()]
    output:
        directory('test/stacked_images/{weighting}_weighting/image.restored.deep'),
        directory('test/stacked_images/{weighting}_weighting/psf.image.deep'),
        directory('test/stacked_images/{weighting}_weighting/psf.deep'),
        directory('test/stacked_images/{weighting}_weighting/residual.deep'),
        directory('test/stacked_images/{weighting}_weighting/model.deep'),
    params:
        #Need to use abspath here I think
        cp = '{0:s}'.format(WORKING_DIR) + '/test/stacked_images/{weighting}_weighting/',
        cn_restored_image = 'image.restored.deep',
        cn_psf = 'psf.image.deep',
        cn_psf_for_weighting = 'psf.deep',
        cn_residual = 'residual.deep',
        cn_model = 'model.deep',
        stack_indices_logfile_restored = '{0:s}'.format(WORKING_DIR) + '/test/stacked_images/{weighting}_weighting/psf_weighting_restored.log',
        stack_indices_logfile_residual = '{0:s}'.format(WORKING_DIR) + '/test/stacked_images/{weighting}_weighting/psf_weighting_residual.log'
    resources:
        walltime=15,
        mem_mb=4000,
    shell:
        #The images need to weight with the (non-normalised) psf, aslo the residuals should be weighted 
        #The normalised psf needs to be averaged as well as the weights
        #The non-normalised ps needs to be summed onyl so proper normalisation can happen after stacking
        ENV_SETUP + \
        'dstacking -cl {input.restored_image} -cp {params.cp} -cn {params.cn_restored_image} -psf -pl {input.psf_for_weighting} -l {params.stack_indices_logfile_restored} -o -c ; ' + \
        'dstacking -cl {input.psf} -cp {params.cp} -cn {params.cn_psf} -o -c ; ' + \
        'dstacking -cl {input.psf_for_weighting} -cp {params.cp} -cn {params.cn_psf_for_weighting} -o -c ; ' + \
        'dstacking -cl {input.residual} -cp {params.cp} -cn {params.cn_residual} -psf -pl {input.psf_for_weighting} -l {params.stack_indices_logfile_residual} -o -c ; ' + \
        'dstacking -cl {input.model} -cp {params.cp} -cn {params.cn_model} -o -n -c ; '

rule no_prec_image_stacking:
    #For similar reasons the no_prec case is not included
    input:
        restored_image = ['test/night_{0:s}'.format(night_index) + '/no_prec/image.daily.restored' for night_index in ORIGINAL_MS_MAPPING.keys()],
        psf_for_weighting = ['test/night_{0:s}'.format(night_index) + '/no_prec/psf.wr.1.dumpgrid' for night_index in ORIGINAL_MS_MAPPING.keys()], #For weighting
        psf = ['test/night_{0:s}'.format(night_index) + '/no_prec/psf.daily' for night_index in ORIGINAL_MS_MAPPING.keys()],
        residual = ['test/night_{0:s}'.format(night_index) + '/no_prec/residual.daily' for night_index in ORIGINAL_MS_MAPPING.keys()],
        model = ['test/night_{0:s}'.format(night_index) + '/no_prec/model.daily' for night_index in ORIGINAL_MS_MAPPING.keys()]
    output:
        directory('test/stacked_images/no_prec/image.restored.deep'),
        directory('test/stacked_images/no_prec/psf.image.deep'),
        directory('test/stacked_images/no_prec/psf.deep'),
        directory('test/stacked_images/no_prec/residual.deep'),
        directory('test/stacked_images/no_prec/model.deep'),
    params:
        #Need to use abspath here I think
        cp = '{0:s}'.format(WORKING_DIR) + '/test/stacked_images/no_prec/',
        cn_restored_image = 'image.restored.deep',
        cn_psf = 'psf.image.deep',
        cn_psf_for_weighting = 'psf.deep',
        cn_residual = 'residual.deep',
        cn_model = 'model.deep',
        stack_indices_logfile_restored = '{0:s}'.format(WORKING_DIR) + '/test/stacked_images/no_prec/psf_weighting_restored.log',
        stack_indices_logfile_residual = '{0:s}'.format(WORKING_DIR) + '/test/stacked_images/no_prec/psf_weighting_residual.log'
    resources:
        walltime=15,
        mem_mb=4000,
    shell:
        #The images need to weight with the (non-normalised) psf, aslo the residuals should be weighted 
        #The normalised psf needs to be averaged as well as the weights
        #The non-normalised ps needs to be summed onyl so proper normalisation can happen after stacking
        ENV_SETUP + \
        'dstacking -cl {input.restored_image} -cp {params.cp} -cn {params.cn_restored_image} -psf -pl {input.psf_for_weighting} -l {params.stack_indices_logfile_restored} -o -c ; ' + \
        'dstacking -cl {input.psf} -cp {params.cp} -cn {params.cn_psf} -o -c ; ' + \
        'dstacking -cl {input.psf_for_weighting} -cp {params.cp} -cn {params.cn_psf_for_weighting} -o -c ; ' + \
        'dstacking -cl {input.residual} -cp {params.cp} -cn {params.cn_residual} -psf -pl {input.psf_for_weighting} -l {params.stack_indices_logfile_residual} -o -c ; ' + \
        'dstacking -cl {input.model} -cp {params.cp} -cn {params.cn_model} -o -n -c ; '

rule create_deep_parset:
    input:
        grid = 'test/stacked_grids/{weighting}_weighting/grid.deep',
        psfgrid = 'test/stacked_grids/{weighting}_weighting/psfgrid.deep',
        pcf = 'test/stacked_grids/{weighting}_weighting/pcf.deep',
        template_parset = 'template_parset.in'
    output:
        'test/stacked_grids/{weighting}_weighting/cdeconvolver_{image_names}.in' #Need to have a wildcard in the output so I can pass it to a variable
    params:
        image_names = '{image_names}', #If I don't want to hardcode it in case I want to scale upt to beams
        robustness = lambda wildcards: '2.0' if '{0:s}'.format(wildcards.weighting) == 'natural' else '-2.0' if '{0:s}'.format(wildcards.weighting) == 'uniform' else '2.0'
    shell:
        ENV_SETUP + \
        'dparset -i Cdeconvolver -n {params.image_names} -g WProject -op test/stacked_grids/{wildcards.weighting}_weighting ' +\
        '-pn cdeconvolver_{params.image_names}.in -t {input.template_parset} -tn image.sim_PC -a ' + \
        'grid={0:s}/'.format(WORKING_DIR) + '{input.grid} ' + \
        'psfgrid={0:s}/'.format(WORKING_DIR) + '{input.psfgrid} ' + \
        'pcf={0:s}/'.format(WORKING_DIR) + '{input.pcf} ' +\
        'INnchan={0:d} '.format(N_CHANNELS) +\
        'PWrobustness={params.robustness} -p Wiener'

rule create_no_prec_deep_parset:
    input:
        grid = 'test/stacked_grids/no_prec/grid.deep',
        psfgrid = 'test/stacked_grids/no_prec/psfgrid.deep',
        pcf = 'test/stacked_grids/no_prec/pcf.deep',
        template_parset = 'template_parset.in'
    output:
        'test/stacked_grids/no_prec/cdeconvolver_{image_names}.in' #Need to have a wildcard in the output so I can pass it to a variable
    params:
        image_names = '{image_names}', #If I don't want to hardcode it in case I want to scale upt to beams
    shell:
        ENV_SETUP + \
        'dparset -i Cdeconvolver -n {params.image_names} -g WProject -op test/stacked_grids/no_prec ' +\
        '-pn cdeconvolver_{params.image_names}.in -t {input.template_parset} -tn image.sim_PC -a ' + \
        'grid={0:s}/'.format(WORKING_DIR) + '{input.grid} ' + \
        'psfgrid={0:s}/'.format(WORKING_DIR) + '{input.psfgrid} ' + \
        'pcf={0:s}/'.format(WORKING_DIR) + '{input.pcf} ' +\
        'INnchan={0:d} '.format(N_CHANNELS) +\
        'PWrobustness=2.0 -p '

rule deep_grid_stack_imaging:
    input:
        grid = 'test/stacked_grids/{weighting}_weighting/grid.deep',
        parset = 'test/stacked_grids/{weighting}_weighting/cdeconvolver_{image_names}.in'
    output:
        directory('test/stacked_grids/{weighting}_weighting/{image_names}.restored')
    params:
        yanda_logfile = 'logfile_cdeconvolver_{image_names}.log',
        parset_name = 'cdeconvolver_{image_names}.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS
    shell:
        ENV_SETUP + \
        'cd test/stacked_grids/{wildcards.weighting}_weighting/ ' + '&& mpirun -np {0:d}'.format(N_CHANNELS) + ' cdeconvolver-mpi -c {params.parset_name} > ./{params.yanda_logfile}'

rule no_prec_deep_grid_stack_imaging:
    input:
        grid = 'test/stacked_grids/no_prec/grid.deep',
        parset = 'test/stacked_grids/no_prec/cdeconvolver_{image_names}.in'
    output:
        directory('test/stacked_grids/no_prec/{image_names}.restored')
    params:
        yanda_logfile = 'logfile_cdeconvolver_{image_names}.log',
        parset_name = 'cdeconvolver_{image_names}.in'
    resources:
        walltime=15,
        mem_mb=4000,
        cpus_per_task=1,
        ntasks=N_CHANNELS
    shell:
        ENV_SETUP + \
        'cd test/stacked_grids/no_prec/ && mpirun -np {0:d}'.format(N_CHANNELS) + ' cdeconvolver-mpi -c {params.parset_name} > ./{params.yanda_logfile}'
